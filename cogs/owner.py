# python3.6
# -*- coding: utf-8 -*-

import discord
from discord.ext import commands

import asyncio
import io
import os
import platform
import sys
import textwrap
import traceback
import psutil
import json
from contextlib import redirect_stdout
from random import randint

from ShellExecutor import *
from checks import *


class Owner(object):
    def __init__(self, bot):
        self.bot = bot
        self.bot.yes = '‚úîÔ∏è'
        self.bot.no = '‚ùå'

    @commands.command('for', hidden=True, aliases=['cmdfor'])
    @owner()
    async def for_(self, ctx, command: str, arg: str, condition):

        await ctx.send(f'–í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É `{command}` —Å —É—Å–ª–æ–≤–∏–µ–º `{arg}: {condition}`...')
        env = {'ctx': ctx}
        env.update(globals())

        exec(f'async def exfor():\n  for x in {condition}:\n    await ctx.invoke(ctx.bot.get_command("{command}"), {arg}=x)', env)

        func = env['exfor']
        await func()
 
        del(func)
        del(env)
        
        await ctx.send(f'–í—ã–ø–æ–ª–Ω–µ–Ω–æ!')


    @commands.command(name='owncleanup', hidden=True, aliases=['ocup'])
    @commands.guild_only()
    @owner()
    @commands.bot_has_permissions(manage_messages=True)
    async def owner_cleanup(self, ctx, member: discord.Member, count: int):
        """[RU] –£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ (—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫)
        [EN] Delete messages from a specific member (for my developer)
        """

        if count > 100:
            await ctx.send(f'<:naomi_tick_no:525026037868789783> {count} > 100.')
        else:
            def is_member(m):
                return m.author.id == member.id
            await ctx.channel.purge(limit=count, check=is_member)


    @commands.command('del-cog', hidden=True, aliases=['-cog'])
    @owner()
    async def del_cog(self, ctx, path: str):
        """[RU] –£–¥–∞–ª–∏—Ç—å –º–æ–¥—É–ª—å
        [EN] Delete module
        """
        try:
            os.remove(path.replace('.', '/') + '.py')
            await ctx.send(f'–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω >> `{path}``')
        except Exception as e:
            await ctx.send(f'–ù–µ —É–¥–∞–ª–æ—Å—å >> `{path}``\n{type(e).__name__}: {e}')

    @commands.command('del-cmd', hidden=True, aliases=['-cmd'])
    @owner()
    async def del_command(self, ctx, cmd: str):
        """[RU] –£–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É
        [EN] Delete command
        """
        try:
            self.bot.remove_command(cmd)
            await ctx.send(f'–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω >> `{cmd}``')
        except Exception as e:
            await ctx.send(f'–ù–µ —É–¥–∞–ª–æ—Å—å >> `{cmd}``\n{type(e).__name__}: {e}')

    @commands.command(name='logout', hidden=True)
    @owner()
    async def logout(self, ctx):
        """[RU] –î–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å –º–µ–Ω—è –æ—Ç Discord
        [EN] Logout me from Discord
        """
        def message_check(m):
            return m.author.id == ctx.author.id

        await ctx.send('–ú–Ω–µ –ø—Ä–∞–≤–¥–∞ –Ω–∞–¥–æ –¥–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è?')
        msg = await self.bot.wait_for('message', check=message_check, timeout=120.0)

        if msg.content.lower() in ['–¥–∞', '–∞–≥–∞', '—É–≥—É', '–¥–∞–≤–∞–π —É–∂–µ']:
            await ctx.send('–•–æ—Ä–æ—à–æ, —è –¥–µ–∞–≤—Ç–∏—Ä–∏–∑—É—é—Å—å...')
        else:
            return await ctx.send('–û—Å—Ç–∞—é—Å—å –≤ —Å–µ—Ç–∏...')

        await asyncio.sleep(1.2)
        await self.bot.logout()

    @commands.command(name='sysinfo', hidden=True, aliases=['sys', 'system'])
    @owner()
    async def sysinfo(self, ctx):
        """[RU] –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        [EN] System statistics
        """
        pid = os.getpid()
        py = psutil.Process(pid)

        embed = discord.Embed(timestamp=ctx.message.created_at,
                              color=randint(0x000000, 0xFFFFFF),
                              title='–°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')

        embed.add_field(name='–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä:',
                        value=f'‚ñ´ –ö–æ–ª-–≤–æ —è–¥–µ—Ä: {psutil.cpu_count()}\n'
                              f'‚ñ´ –ó–∞–≥—Ä—É–∑–∫–∞: {round(psutil.cpu_percent())}%\n'
                              f'‚ñ´ –ó–∞–≥—Ä—É–∑–∫–∞ –±–æ—Ç–æ–º: {round(py.cpu_percent())}%')
        embed.add_field(name='–û–ø–µ—Ä–∞—Ç–∏–≤–∞:',
                        value=f'‚ñ´ –û–±—ä–µ–º: {psutil.virtual_memory().total\n'
                              f'‚ñ´ –ó–∞–≥—Ä—É–∑–∫–∞: {round(psutil.virtual_memory().percent)}%\n'
                              f'‚ñ´ –ó–∞–≥—Ä—É–∑–∫–∞ –±–æ—Ç–æ–º: {round(py.memory_percent())}%')
        embed.add_field(name='–¢–µ–∫—É—â–∏–π –º–æ–¥—É–ª—å:',
                        value='‚ñ´ ' + os.path.basename(__file__))
        embed.add_field(name='–ò–º—è –ø—Ä–æ—Ü–µ—Å—Å–∞:',
                        value='‚ñ´ ' + py.name())
        embed.add_field(name='üñ• –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:',
                        value='‚ñ´ ' + platform.platform())
        embed.add_field(name='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:',
                        value='‚ñ´ ' + py.username())
        embed.add_field(name='–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä —Ç—É—Ç:',
                        value='‚ñ´ ' + sys.executable)
        embed.add_field(name=f'Discord.py {discord.__version__}',
                        value=chr(173))
        embed.add_field(name=f'Python {platform.python_version()}',
                        value=chr(173))
        
        embed.set_author(name=ctx.author.name, icon_url=ctx.author.avatar_url)
        embed.set_footer(text=f'{ctx.command}')

        await ctx.send(embed=embed)

    @commands.command(name='quit', aliases=['quitserver'], hidden=True)
    @owner()
    async def quit_guild(self, ctx, guild: discord.Guild):
        """[RU] –û—Ç–∫–ª—é—á–∏—Ç—å –º–µ–Ω—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
        [EN] Disconnect me from a server
        """
        try:
            await guild.leave()

        except:
            await ctx.send(f'–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞:\n```{traceback.format_exc()}```')

    @commands.command(name='ping', hidden=True)
    @owner()
    async def ping(self, ctx):
        """[RU] Client & API latency
        [EN] –ó–∞–¥–µ—Ä–∂–∫–∞ API –∏ –∫–ª–∏–µ–Ω—Ç–∞
        """

        resp = await ctx.send('–¢–µ—Å—Ç–∏—Ä—É–µ–º...')
        diff = resp.created_at - ctx.message.created_at
        await resp.edit(content=f':ping_pong: Pong!\n–ó–∞–¥–µ—Ä–∂–∫–∞ API: {1000 * diff.total_seconds():.1f}–º—Å.\n–ó–∞–¥–µ—Ä–∂–∫–∞ {self.bot.user.name}: {round(self.bot.latency * 1000)}–º—Å')

    @commands.command(hidden=True, aliases=['r'])
    @owner()
    async def restart(self, ctx):
        """[RU] –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫
        [EN] Restart
        """
        await self.bot.change_presence(activity=discord.Game(name='–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞...'), status=discord.Status.dnd)
        await ctx.send(embed=discord.Embed(color=0x13CFEB).set_footer(text="–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º—Å—è..."))
        os.execl(sys.executable, sys.executable, * sys.argv)

    @commands.command(name='exc', hidden=True)
    @owner()
    async def exception(self, ctx):
        """[RU] –í—ã–¥–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        [EN] Raise an exception
        """
        raise RuntimeError('–í—ã–∑–≤–∞–Ω–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º.')

    @commands.command(name='load', hidden=True)
    @owner()
    async def cog_load(self, ctx, *, cog: str):
        """[RU] –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å
        [EN] Load module
        """

        try:
            self.bot.load_extension(cog)
        except Exception as e:
            await ctx.send(f'**`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è {cog}:`** \n{type(e).__name__} - {e}')
        else:
            await ctx.send(f'**`–ú–æ–¥—É–ª—å {cog} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω`**')

    @commands.command(name='unload', hidden=True)
    @owner()
    async def cog_unload(self, ctx, *, cog: str):
        """[RU] –í—ã–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å
        [EN] Unload module
        """

        try:
            self.bot.unload_extension(cog)
        except Exception as e:
            await ctx.send(f'**`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è {cog}:`** \n{type(e).__name__} - {e}')
        else:
            await ctx.send(f'**`–ú–æ–¥—É–ª—å {cog} —É—Å–ø–µ—à–Ω–æ –≤—ã–≥—Ä—É–∂–µ–Ω`**')

    @commands.command(name='shell', aliases=['sh', 'bash'], hidden=True)
    @owner()
    async def shell(self, ctx, *, code: str):
        """[RU] –¢–µ—Ä–º–∏–Ω–∞–ª Bash (—Ç–µ–ø–µ—Ä—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π!)
        [EN] Bash terminal (now async!)
        """
        async with ctx.channel.typing():
            code_strings = code.replace('```python', '') \
                            .replace('```bash', '') \
                            .replace('```', '') \
                            .split('\n')
            output = []

            def shell_(cmd):
                return os.popen(cmd).read()

            for string in code_strings:
                cmd = await self.bot.loop.run_in_executor(None, shell, string)
                if cmd == '':
                    cmd = '‚Ñπ | –ù–µ—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.'

                output.append(cmd)
            
            output = "\n".join(output)

            embed = discord.Embed(color=0x42A2EC)
            embed.add_field(name=f'{self.bot.yes} Bash –¢–µ—Ä–º–∏–Ω–∞–ª | –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞:',
                            value=f"```bash\n{output}```")
            embed.set_author(name=ctx.author, icon_url=ctx.author.avatar_url)

            try:
                await ctx.send(f'{ctx.author.mention}, –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç!', embed=embed)
            except:
                try:
                    await ctx.send(f'–ú–Ω–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –≤ —á–∞—Ç.')

    @commands.command(name='add-cog', hidden=True, aliases=['+cog'])
    @owner()
    async def add_cog(self, ctx):
        """[RU] –î–æ–±–∞–≤–∏—Ç—å –º–æ–¥—É–ª—å
        [EN] Add module
        """
        if len(ctx.message.attachments) < 1:
            return await ctx.send('<:naomi_tick_no:525026037868789783> –í—ã –Ω–µ –≤–ª–æ–∂–∏–ª–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é —Ñ–∞–π–ª —Å –∫–æ–¥–æ–º...')
        if len(ctx.message.attachments) > 1:
            return await ctx.send('<:naomi_tick_yes:525026013663723540> –ö —Å–æ–æ–±—â–µ–Ω–∏—é –≤–ª–æ–∂–µ–Ω–æ –±–æ–ª–µ–µ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞... –û–∫, –∑–∞–≥—Ä—É–∂—É –≤—Å–µ.')

        for ext in ctx.message.attachments:
            full_path = f'cogs/{ext.filename}'
            await ext.save(full_path)
            new_path = ''

            for x in full_path:
                if x != '.':
                    new_path += x
                else:
                    break
            try:
                self.bot.unload_extension(new_path.replace('/', '.'))
                self.bot.load_extension(new_path.replace('/', '.'))
            except:
                await ctx.send(f'<:naomi_tick_no:525026037868789783> –ú–æ–¥—É–ª—å `{new_path.replace("/", ".")}` –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å. –£–¥–∞–ª—è—é —Å —Ö–æ—Å—Ç–∞...\n```python\n{traceback.format_exc()}```', delete_after=15)
                os.remove(full_path)
            else:
                await ctx.send(f'<:naomi_tick_yes:525026013663723540> –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω >> `{new_path.replace("/", ".")}``', delete_after=10)
            await ctx.message.delete()

    @commands.command(name='execute', aliases=['exec', 'eval', 'run'], hidden=True)
    @owner()
    async def execute(self, ctx, *, code: str):
        """[RU] –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä Python
        [EN] Python interpreter
        """
        async def v_execution():
            async with ctx.channel.typing():
                env = {
                    'channel': ctx.channel,
                    'author': ctx.author,
                    'guild': ctx.guild,
                    'message': ctx.message,
                    'client': self.bot,
                    'bot': self.bot,
                    'Naomi': self.bot,
                    'naomi': self.bot,
                    'discord': discord,
                    'ctx': ctx
                }

                env.update(globals())
                _code = ''.join(code).replace('```python', '').replace('```', '')

                try:
                    stdout = io.StringIO()
                    interpretate = f'async def virtexec():\n{textwrap.indent(_code, "  ")}'
                    exec(interpretate, env)
                    virtexec = env['virtexec']
                    with redirect_stdout(stdout):
                        function = await virtexec()

                except:
                    stdout = io.StringIO()
                    value = stdout.getvalue()

                    try:
                        msg = discord.Embed(color=randint(0x000000, 0xFFFFFF))
                        msg.add_field(name='<:naomi_tick_no:525026037868789783> –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä Python:',
                                      value=f"```python\n{value}{traceback.format_exc()}```".replace(self.bot.http.token, '‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢'))
                        msg.set_footer(text=f'–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å - Python {platform.python_version()} | {platform.system()}')
                        await ctx.message.remove_reaction(loading, self.bot.user)
                        return await ctx.send(f'{ctx.author.mention}, –±–æ–ª—å –ø–µ—á–∞–ª—å :—Å', embed=msg)
                    except:
                            return await ctx.send(f'–ú–Ω–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –≤ —á–∞—Ç.')
                else:
                    value = stdout.getvalue()
                    if not function:
                        if not value:
                            value = '‚Ñπ | –ù–µ—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.'
                        try:
                            success_msg = discord.Embed(color=randint(0x000000, 0xFFFFFF))
                            success_msg.add_field(name='<:naomi_tick_yes:525026013663723540> –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä Python:',
                                                  value=f"```python\n{value}```".replace(self.bot.http.token, '‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢'))
                            success_msg.set_footer(text=f'–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ - Python {platform.python_version()} | {platform.system()}')
                            await ctx.message.remove_reaction(loading, self.bot.user)
                            return await ctx.send(f'{ctx.author.mention}, –≤—Å–µ –≥–æ—Ç–æ–≤–æ!', embed=success_msg)
                        except:
                            return await ctx.send(f'–ú–Ω–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –≤ —á–∞—Ç.')
                    else:
                        try:
                            success_msg = discord.Embed(color=randint(0x000000, 0xFFFFFF))
                            success_msg.add_field(name='<:naomi_tick_yes:525026013663723540> –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä Python:',
                                                  value=f"```python\n{value}{function}```".replace(self.bot.http.token, '‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢'))
                            success_msg.set_footer(text=f'–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ - Python {platform.python_version()} | {platform.system()}')
                            return await ctx.send(f'{ctx.author.mention}, –≤–æ—Ç! –Ø –≤—Å–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∞ c:', embed=success_msg)
                        except:
                                return await ctx.send(f'–ú–Ω–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –≤ —á–∞—Ç.')

        self.bot.loop.create_task(v_execution())

def setup(bot):
    bot.add_cog(Owner(bot))
